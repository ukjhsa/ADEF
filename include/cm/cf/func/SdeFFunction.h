#ifndef SDE_F_FUNCTION_H
#define SDE_F_FUNCTION_H

#include <memory>
#include <vector>
#include <string>
#include "Function.h"
#include "cm/ControlledObject.h"
#include "Any.h"
#include "Configuration.h"
#include "PrototypeManager.h"
#include "Individual.h"

namespace adef {

/**
@brief JdeFFunction generates numbers according to
the procedure of the F value in the SDE algorithm.

JdeFFunction has the following feature:
- generate(): return the number generated by
the procedure of the F value in the SDE algorithm.
- record(): record parameters into the rand component.
- update(): update values of rand.

@par Requirement
record parameters into Function:
- the size of parameters is equal to the value of "number_of_parameters"
.

ADEF supports many kinds of SdeFFunction:
- SdeFFunction.

@par The configuration
SdeFFunction has extra configurations:
- member
    - name: "rand"
    - value: object configuration which is the class derived from
             Function.
- member
    - name: "number_of_parameters"
    - value: <tt>unsigned int</tt>
.
See setup() for the details.
*/
class SdeFFunction : public Function<double>
{
public:

    using T = double;
/// @copydoc Function::Object
    using Object = typename Function<T>::Object;

/**
@brief Clone the current class.
@sa clone_impl()
*/
    std::shared_ptr<SdeFFunction> clone() const
    {
        return std::dynamic_pointer_cast<SdeFFunction>(clone_impl());
    }
/**
@brief Set up the internal states.

If @em SomeThing is the SdeFFunction and
has the following configuration:
- rand: ::RealNormalDisFunction of
        mean ::RealConstantFunction of object 0.0
        and stddev ::RealConstantFunction of object 0.5
- number_of_parameters: 3
.
its configuration should be
- JSON configuration
@code
"SomeThing" : {
    "classname" : "SdeFFunction",
    "rand" : {
        "classname" : "RealNormalDisFunction",
        "mean" : {
            "classname" : "RealConstantFunction",
            "object" : 0.0
        },
        "stddev" : {
            "classname" : "RealConstantFunction",
            "object" : 0.5
        }
    },
    "number_of_parameters" : 3
}
@endcode
.
*/
    void setup(const Configuration& config, const PrototypeManager& pm) override
    {
        auto rand_config = config.get_config("rand");
        auto rand = make_and_setup_type<BaseFunction>(rand_config, pm);
        rand->set_function_name("rand");
        add_function(rand);

        parameters_.resize(config.get_uint_value("number_of_parameters"));
    }

    Object generate() override
    {
        Object diff = 0;
        auto size = parameters_.size();
        for (decltype(size) idx = 1; idx < size; idx+=2) {
            diff += parameters_.at(idx) - parameters_.at(idx+1);
        }
        return parameters_.at(0) + get_function("rand")->generate() * diff;
    }

    bool record(const std::vector<Any>& params,
                const std::string& name = "") override
    {
        if (params.size() == parameters_.size()) {
            for (decltype(params.size()) idx = 0; idx < params.size(); ++idx) {
                parameters_.at(idx) = any_cast<Object>(params.at(idx));
            }
        }
        else {
            throw std::logic_error("SdeFFunction accept wrong parameters.");
        }
        return true;
    }

    bool record(const std::vector<Any>& params,
                std::shared_ptr<const Individual> parent,
                std::shared_ptr<const Individual> offspring,
                const std::string& name = "") override
    {
        return record(params, name);
    }

    void update() override
    {
        get_function("rand")->update();
    }

    unsigned int number_of_parameters() const override
    {
        return parameters_.size();
    }

private:

/// The list of parameters
    std::vector<Object> parameters_;

private:

    std::shared_ptr<Prototype> clone_impl() const override
    {
        return std::make_shared<SdeFFunction>(*this);
    }
};

}

#endif // SDE_F_FUNCTION_H
