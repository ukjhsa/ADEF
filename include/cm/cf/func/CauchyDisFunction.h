#ifndef CAUCHY_DIS_FUNCTION_H
#define CAUCHY_DIS_FUNCTION_H

#include <memory>
#include <vector>
#include <string>
#include <cstdlib>
#include <random>
#include "Function.h"
#include "Any.h"
#include "Configuration.h"
#include "PrototypeManager.h"
#include "Random.h"
#include "Individual.h"

namespace adef {

/**
@brief CauchyDisFunction generates random numbers
according to the Cauchy distribution.

CauchyDisFunction has the following feature:
- generate(): return the random numbers generated by the Cauchy distribution.
- record(): record parameters into the location and/or scale component.
- update(): update values of the location and scale.

@par Requirement
record parameters into Function:
- name "location"
- name "scale"
.

ADEF supports many kinds of CauchyDisFunction:
- ::RealCauchyDisFunction.

@par The configuration
CauchyDisFunction has extra configurations:
- member
    - name: "location"
    - value: object configuration which is the class derived from
             Function.
- member
    - name: "scale"
    - value: object configuration which is the class derived from
             Function.
.
See setup() for the details.
*/
template<typename T = double, typename G = std::mt19937>
class CauchyDisFunction : public Function<T>
{
public:

/// @copydoc Function::Object
    using Object = typename Function<T>::Object;

public:

/**
@brief The default constructor with seed value 1.

The default value of location is 0, scale is 1.
*/
    CauchyDisFunction() :
        generator_(1), location_(0), scale_(1)
    {
    }
/**
@brief The constructor with the given seed.
@param seed The seed value of the pseudo-random number generator.

The default value of location is 0, scale is 1.
*/
    CauchyDisFunction(unsigned int seed) :
        generator_(seed), location_(0), scale_(1)
    {
    }
/**
@brief The copy constructor, but the pseudo-random number generator renews.
*/
    CauchyDisFunction(const CauchyDisFunction& rhs) :
        Function<T>(rhs),
        generator_(random_->random()),
        location_(rhs.location_), scale_(rhs.scale_)
    {
    }

/**
@brief Clone the current class.
@sa clone_impl()
*/
    std::shared_ptr<CauchyDisFunction> clone() const
    {
        return std::dynamic_pointer_cast<CauchyDisFunction>(clone_impl());
    }
/**
@brief Set up the internal states.

If @em SomeThing is the ::RealCauchyDisFunction and
has the following configuration:
- location: ::RealConstantFunction of value 0.0
- scale: ::RealConstantFunction of value 1.0
.
its configuration should be
- JSON configuration
@code
"SomeThing" : {
    "classname" : "RealCauchyDisFunction",
    "location" : {
        "classname" : "RealConstantFunction",
        "value" : 0.0
    },
    "scale" : {
        "classname" : "RealConstantFunction",
        "value" : 1.0
    }
}
@endcode
.
*/
    void setup(const Configuration& config, const PrototypeManager& pm) override
    {
        auto location_config = config.get_config("location");
        auto location = make_and_setup_type<BaseFunction>(location_config, pm);
        location->set_function_name("location");
        Function<T>::add_function(location);

        auto scale_config = config.get_config("scale");
        auto scale = make_and_setup_type<BaseFunction>(scale_config, pm);
        scale->set_function_name("scale");
        Function<T>::add_function(scale);

        location_ = 0;
        scale_ = 1;
    }

    Object generate() override
    {
        std::cauchy_distribution<Object> cauchy(location_, scale_);
        return cauchy(generator_);
    }

    void update() override
    {
        auto location = Function<T>::get_function("location");
        location->update();
        location_ = location->generate();

        auto scale = Function<T>::get_function("scale");
        scale->update();
        scale_ = scale->generate();
    }

    unsigned int number_of_parameters() const override
    {
        return 0;
    }

private:

/// The type of the pseudo-random number generator.
    using Generator = G;
/// The pseudo-random number generator.
    Generator generator_;

/// The current value of location.
    Object location_;
/// The current value of scale.
    Object scale_;

private:

    std::shared_ptr<Prototype> clone_impl() const override
    {
        return std::make_shared<CauchyDisFunction>(*this);
    }
};

/**
@brief RealCauchyDisFunction is the CauchyDisFunction that
controls the real number.
*/
using RealCauchyDisFunction = CauchyDisFunction<>;

}

#endif // CAUCHY_DIS_FUNCTION_H
