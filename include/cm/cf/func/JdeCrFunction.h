#ifndef JDE_CR_FUNCTION_H
#define JDE_CR_FUNCTION_H

#include <memory>
#include "Function.h"

namespace adef {

class Configuration;
class PrototypeManager;

/**
@brief JdeCrFunction generates numbers according to
the procedure of the CR value in the JDE algorithm.

JdeCrFunction has the following feature:
- generate(): return the number generated by
the procedure of the CR value in the JDE algorithm.
- record(): record parameters into the object and/or tau component.
- update(): update values of the object and tau.

@par Requirement
record parameters into Function:
- name "object"
- name "tau"
.

ADEF supports many kinds of JdeCrFunction:
- JdeCrFunction.

@par The configuration
JdeCrFunction has extra configurations:
- member
    - name: "object"
    - value: object configuration which is the ::RealVariableFunction.
- member
    - name: "tau"
    - value: object configuration which is the class derived from
             Function.
.
See setup() for the details.
*/
class JdeCrFunction : public Function<double>
{
public:

    using T = double;

/// @copydoc Function::Object
    using Object = typename Function<T>::Object;

/**
@brief Clone the current class.
@sa clone_impl()
*/
    std::shared_ptr<JdeCrFunction> clone() const
    {
        return std::dynamic_pointer_cast<JdeCrFunction>(clone_impl());
    }
/**
@brief Set up the internal states.

If @em SomeThing is the JdeCrFunction and
has the following configuration:
- object: ::RealVariableFunction of object 0.9
- tau: ::RealConstantFunction of object 0.1
.
its configuration should be
- JSON configuration
@code
"SomeThing" : {
    "classname" : "JdeCrFunction",
    "object" : {
        "classname" : "RealVariableFunction",
        "object" : 0.9
    },
    "tau" : {
        "classname" : "RealConstantFunction",
        "object" : 0.1
    }
}
@endcode
.
*/
    void setup(const Configuration& config, const PrototypeManager& pm) override;

    Object generate() override;

    void update() override;

    unsigned int number_of_parameters() const override;

private:

/// The value of the parameter.
    Object object_;
/// The value of the tau.
    Object tau_;

private:

    std::shared_ptr<Prototype> clone_impl() const override
    {
        return std::make_shared<JdeCrFunction>(*this);
    }
};

}

#endif // JDE_CR_FUNCTION_H
